#!/bin/bash

################################################################################
# WebStack Manager CLI
# Multi-environment web stack management tool
################################################################################

set -e

# Configuration
INSTALL_DIR="/opt/webstack"
SITES_DIR="$INSTALL_DIR/sites"
TEMPLATES_DIR="$INSTALL_DIR/templates"
BACKUPS_DIR="$INSTALL_DIR/backups"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

################################################################################
# Helper Functions
################################################################################

print_success() {
    echo -e "${GREEN}✓ $1${NC}"
}

print_error() {
    echo -e "${RED}✗ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠ $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ $1${NC}"
}

print_header() {
    echo -e "\n${CYAN}╔════════════════════════════════════════╗${NC}"
    echo -e "${CYAN}║  $1${NC}"
    echo -e "${CYAN}╚════════════════════════════════════════╝${NC}\n"
}

# Generate random password
generate_password() {
    openssl rand -base64 24 | tr -d "=+/" | cut -c1-20
}

# Validate domain name
validate_domain() {
    local domain=$1
    if [[ $domain =~ ^[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9]?\.[a-zA-Z]{2,}$ ]]; then
        return 0
    else
        return 1
    fi
}

# Check if site exists
site_exists() {
    local site_name=$1
    if [ -d "$SITES_DIR/$site_name" ]; then
        return 0
    else
        return 1
    fi
}

################################################################################
# Command: Create New Site
################################################################################

cmd_create() {
    print_header "Create New Site"

    # Site name
    while true; do
        echo -n "Site name (alphanumeric, lowercase): "
        read SITE_NAME
        SITE_NAME=$(echo "$SITE_NAME" | tr '[:upper:]' '[:lower:]' | tr -cd '[:alnum:]_-')

        if [ -z "$SITE_NAME" ]; then
            print_error "Site name cannot be empty"
            continue
        fi

        if site_exists "$SITE_NAME"; then
            print_error "Site '$SITE_NAME' already exists"
            continue
        fi

        break
    done

    # Domain name
    while true; do
        echo -n "Domain name (e.g., example.com): "
        read DOMAIN

        if validate_domain "$DOMAIN"; then
            break
        else
            print_error "Invalid domain name. Please try again."
        fi
    done

    # PHP version selection
    echo -e "\n${BLUE}Select PHP version:${NC}"
    echo "  1) PHP 8.3"
    echo "  2) PHP 8.2"
    echo "  3) PHP 8.1"
    echo "  4) PHP 8.0"
    echo "  5) PHP 7.4"

    while true; do
        echo -n "Choice [1-5]: "
        read PHP_CHOICE
        case $PHP_CHOICE in
            1) PHP_VERSION="8.3"; break;;
            2) PHP_VERSION="8.2"; break;;
            3) PHP_VERSION="8.1"; break;;
            4) PHP_VERSION="8.0"; break;;
            5) PHP_VERSION="7.4"; break;;
            *) print_error "Invalid choice";;
        esac
    done

    # Database type selection
    echo -e "\n${BLUE}Select database type:${NC}"
    echo "  1) MariaDB 11.2 (latest)"
    echo "  2) MariaDB 10.11 (LTS)"
    echo "  3) MySQL 8.0"
    echo "  4) MySQL 5.7"
    echo "  5) PostgreSQL 16"

    while true; do
        echo -n "Choice [1-5]: "
        read DB_CHOICE
        case $DB_CHOICE in
            1) DB_TYPE="mariadb"; DB_VERSION="11.2"; break;;
            2) DB_TYPE="mariadb"; DB_VERSION="10.11"; break;;
            3) DB_TYPE="mysql"; DB_VERSION="8.0"; break;;
            4) DB_TYPE="mysql"; DB_VERSION="5.7"; break;;
            5) DB_TYPE="postgres"; DB_VERSION="16"; break;;
            *) print_error "Invalid choice";;
        esac
    done

    # Database configuration
    echo -e "\n${BLUE}Database Configuration:${NC}"

    echo -n "Database name [default: ${SITE_NAME}_db]: "
    read DB_NAME
    DB_NAME=${DB_NAME:-"${SITE_NAME}_db"}

    echo -n "Database user [default: ${SITE_NAME}_user]: "
    read DB_USER
    DB_USER=${DB_USER:-"${SITE_NAME}_user"}

    echo -n "Database password [leave empty to auto-generate]: "
    read -s DB_PASSWORD
    echo
    if [ -z "$DB_PASSWORD" ]; then
        DB_PASSWORD=$(generate_password)
        print_info "Generated database password: $DB_PASSWORD"
    fi

    DB_ROOT_PASSWORD=$(generate_password)

    # Additional services
    echo -e "\n${BLUE}Additional services (optional):${NC}"
    echo -n "Add Redis cache? [y/N]: "
    read ADD_REDIS
    ADD_REDIS=${ADD_REDIS:-n}

    echo -n "Add phpMyAdmin/Adminer? [y/N]: "
    read ADD_ADMIN
    ADD_ADMIN=${ADD_ADMIN:-n}

    # Create site directory
    SITE_DIR="$SITES_DIR/$SITE_NAME"
    mkdir -p "$SITE_DIR"/{public,logs}

    print_info "Creating site configuration..."

    # Generate docker-compose.yml
    cat > "$SITE_DIR/docker-compose.yml" <<EOF
version: '3.8'

services:
  web:
    image: nginx:alpine
    container_name: ${SITE_NAME}_web
    restart: unless-stopped
    networks:
      - ${SITE_NAME}_internal
      - webstack
    volumes:
      - ./public:/var/www/html:ro
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./logs:/var/log/nginx
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${SITE_NAME}.rule=Host(\\\`${DOMAIN}\\\`)"
      - "traefik.http.routers.${SITE_NAME}.entrypoints=websecure"
      - "traefik.http.routers.${SITE_NAME}.tls.certresolver=letsencrypt"
      - "traefik.http.services.${SITE_NAME}.loadbalancer.server.port=80"
      - "traefik.docker.network=webstack"
    depends_on:
      - php
      - db

  php:
    image: php:${PHP_VERSION}-fpm-alpine
    container_name: ${SITE_NAME}_php
    restart: unless-stopped
    networks:
      - ${SITE_NAME}_internal
    volumes:
      - ./public:/var/www/html
    environment:
      - DB_HOST=db
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
EOF

    # Add database service
    if [ "$DB_TYPE" = "postgres" ]; then
        cat >> "$SITE_DIR/docker-compose.yml" <<EOF

  db:
    image: postgres:${DB_VERSION}-alpine
    container_name: ${SITE_NAME}_db
    restart: unless-stopped
    networks:
      - ${SITE_NAME}_internal
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
EOF
    else
        cat >> "$SITE_DIR/docker-compose.yml" <<EOF

  db:
    image: ${DB_TYPE}:${DB_VERSION}
    container_name: ${SITE_NAME}_db
    restart: unless-stopped
    networks:
      - ${SITE_NAME}_internal
    volumes:
      - db_data:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
      - MYSQL_DATABASE=${DB_NAME}
      - MYSQL_USER=${DB_USER}
      - MYSQL_PASSWORD=${DB_PASSWORD}
EOF
    fi

    # Add Redis if requested
    if [[ "$ADD_REDIS" =~ ^[Yy]$ ]]; then
        cat >> "$SITE_DIR/docker-compose.yml" <<EOF

  redis:
    image: redis:7-alpine
    container_name: ${SITE_NAME}_redis
    restart: unless-stopped
    networks:
      - ${SITE_NAME}_internal
    volumes:
      - redis_data:/data
EOF
    fi

    # Add phpMyAdmin/Adminer if requested
    if [[ "$ADD_ADMIN" =~ ^[Yy]$ ]]; then
        cat >> "$SITE_DIR/docker-compose.yml" <<EOF

  adminer:
    image: adminer:latest
    container_name: ${SITE_NAME}_adminer
    restart: unless-stopped
    networks:
      - ${SITE_NAME}_internal
      - webstack
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${SITE_NAME}_adminer.rule=Host(\\\`db.${DOMAIN}\\\`)"
      - "traefik.http.routers.${SITE_NAME}_adminer.entrypoints=websecure"
      - "traefik.http.routers.${SITE_NAME}_adminer.tls.certresolver=letsencrypt"
      - "traefik.docker.network=webstack"
    depends_on:
      - db
EOF
    fi

    # Add networks and volumes
    cat >> "$SITE_DIR/docker-compose.yml" <<EOF

networks:
  ${SITE_NAME}_internal:
    driver: bridge
  webstack:
    external: true
    name: webstack

volumes:
  db_data:
EOF

    if [[ "$ADD_REDIS" =~ ^[Yy]$ ]]; then
        echo "  redis_data:" >> "$SITE_DIR/docker-compose.yml"
    fi

    # Create Nginx configuration
    cat > "$SITE_DIR/nginx.conf" <<'EOF'
server {
    listen 80;
    server_name _;
    root /var/www/html;
    index index.php index.html index.htm;

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    location ~ \.php$ {
        fastcgi_pass php:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;
        fastcgi_buffer_size 128k;
        fastcgi_buffers 256 4k;
        fastcgi_busy_buffers_size 256k;
    }

    location ~ /\.(?!well-known).* {
        deny all;
    }

    client_max_body_size 100M;
}
EOF

    # Create sample index.php
    cat > "$SITE_DIR/public/index.php" <<EOF
<?php
echo "<h1>Welcome to $SITE_NAME</h1>";
echo "<p>Domain: $DOMAIN</p>";
echo "<p>PHP Version: " . phpversion() . "</p>";

// Database connection test
try {
    \$dsn = "mysql:host=" . getenv('DB_HOST') . ";dbname=" . getenv('DB_NAME');
    \$pdo = new PDO(\$dsn, getenv('DB_USER'), getenv('DB_PASSWORD'));
    echo "<p style='color: green;'>✓ Database connection successful</p>";
} catch (PDOException \$e) {
    echo "<p style='color: red;'>✗ Database connection failed: " . \$e->getMessage() . "</p>";
}

phpinfo();
EOF

    # Create .env file with credentials
    cat > "$SITE_DIR/.env" <<EOF
# Site Configuration
SITE_NAME=${SITE_NAME}
DOMAIN=${DOMAIN}

# PHP Configuration
PHP_VERSION=${PHP_VERSION}

# Database Configuration
DB_TYPE=${DB_TYPE}
DB_VERSION=${DB_VERSION}
DB_HOST=db
DB_NAME=${DB_NAME}
DB_USER=${DB_USER}
DB_PASSWORD=${DB_PASSWORD}
DB_ROOT_PASSWORD=${DB_ROOT_PASSWORD}

# Additional Services
REDIS_ENABLED=${ADD_REDIS}
ADMIN_ENABLED=${ADD_ADMIN}
EOF

    # Create README
    cat > "$SITE_DIR/README.md" <<EOF
# $SITE_NAME

## Site Information
- **Domain**: $DOMAIN
- **PHP Version**: $PHP_VERSION
- **Database**: $DB_TYPE $DB_VERSION
- **Created**: $(date)

## Credentials
- **Database Name**: $DB_NAME
- **Database User**: $DB_USER
- **Database Password**: $DB_PASSWORD
- **Database Root Password**: $DB_ROOT_PASSWORD

## Management Commands
\`\`\`bash
# Start site
webstack start $SITE_NAME

# Stop site
webstack stop $SITE_NAME

# Restart site
webstack restart $SITE_NAME

# View logs
webstack logs $SITE_NAME

# Backup site
webstack backup $SITE_NAME
\`\`\`

## File Locations
- Site directory: $SITE_DIR
- Web root: $SITE_DIR/public
- Nginx config: $SITE_DIR/nginx.conf
- Logs: $SITE_DIR/logs

## Access
- **Main site**: https://$DOMAIN
EOF

    if [[ "$ADD_ADMIN" =~ ^[Yy]$ ]]; then
        echo "- **Database admin**: https://db.$DOMAIN" >> "$SITE_DIR/README.md"
    fi

    # Start the site
    print_info "Starting site..."
    cd "$SITE_DIR"
    docker compose up -d

    # Print success message
    print_header "Site Created Successfully!"

    echo -e "${GREEN}Site '$SITE_NAME' has been created and started${NC}\n"

    echo -e "${CYAN}Site Information:${NC}"
    echo -e "  Domain: ${BLUE}https://$DOMAIN${NC}"
    echo -e "  PHP: ${BLUE}$PHP_VERSION${NC}"
    echo -e "  Database: ${BLUE}$DB_TYPE $DB_VERSION${NC}"

    if [[ "$ADD_ADMIN" =~ ^[Yy]$ ]]; then
        echo -e "  DB Admin: ${BLUE}https://db.$DOMAIN${NC}"
    fi

    echo -e "\n${CYAN}Database Credentials:${NC}"
    echo -e "  Database: ${BLUE}$DB_NAME${NC}"
    echo -e "  User: ${BLUE}$DB_USER${NC}"
    echo -e "  Password: ${BLUE}$DB_PASSWORD${NC}"
    echo -e "  Root Password: ${BLUE}$DB_ROOT_PASSWORD${NC}"

    echo -e "\n${CYAN}File Locations:${NC}"
    echo -e "  Site directory: ${BLUE}$SITE_DIR${NC}"
    echo -e "  Web root: ${BLUE}$SITE_DIR/public${NC}"
    echo -e "  Configuration: ${BLUE}$SITE_DIR/.env${NC}"

    echo -e "\n${YELLOW}Next Steps:${NC}"
    echo -e "  1. Point $DOMAIN DNS to this server"
    echo -e "  2. Upload your files to: $SITE_DIR/public"
    echo -e "  3. SSL certificate will auto-generate on first visit"
    echo -e "  4. View site info: ${BLUE}cat $SITE_DIR/README.md${NC}\n"
}

################################################################################
# Command: List Sites
################################################################################

cmd_list() {
    print_header "Installed Sites"

    if [ ! -d "$SITES_DIR" ] || [ -z "$(ls -A $SITES_DIR 2>/dev/null)" ]; then
        print_warning "No sites found"
        echo -e "Create a site with: ${BLUE}webstack create${NC}\n"
        return
    fi

    echo -e "${CYAN}╔════════════════════════════════════════════════════════════════════╗${NC}"
    printf "${CYAN}║${NC} %-15s ${CYAN}║${NC} %-25s ${CYAN}║${NC} %-10s ${CYAN}║${NC}\n" "SITE NAME" "DOMAIN" "STATUS"
    echo -e "${CYAN}╠════════════════════════════════════════════════════════════════════╣${NC}"

    for site_dir in "$SITES_DIR"/*; do
        if [ -d "$site_dir" ]; then
            site_name=$(basename "$site_dir")

            # Read domain from .env file
            if [ -f "$site_dir/.env" ]; then
                domain=$(grep "^DOMAIN=" "$site_dir/.env" | cut -d'=' -f2)
            else
                domain="N/A"
            fi

            # Check if containers are running
            cd "$site_dir"
            if docker compose ps | grep -q "Up"; then
                status="${GREEN}Running${NC}"
            else
                status="${RED}Stopped${NC}"
            fi

            printf "${CYAN}║${NC} %-15s ${CYAN}║${NC} %-25s ${CYAN}║${NC} %-10b ${CYAN}║${NC}\n" "$site_name" "$domain" "$status"
        fi
    done

    echo -e "${CYAN}╚════════════════════════════════════════════════════════════════════╝${NC}\n"
}

################################################################################
# Command: Start Site
################################################################################

cmd_start() {
    local site_name=$1

    if [ -z "$site_name" ]; then
        print_error "Usage: webstack start <site-name>"
        return 1
    fi

    if ! site_exists "$site_name"; then
        print_error "Site '$site_name' does not exist"
        return 1
    fi

    print_info "Starting site '$site_name'..."
    cd "$SITES_DIR/$site_name"
    docker compose up -d

    print_success "Site '$site_name' started"
}

################################################################################
# Command: Stop Site
################################################################################

cmd_stop() {
    local site_name=$1

    if [ -z "$site_name" ]; then
        print_error "Usage: webstack stop <site-name>"
        return 1
    fi

    if ! site_exists "$site_name"; then
        print_error "Site '$site_name' does not exist"
        return 1
    fi

    print_info "Stopping site '$site_name'..."
    cd "$SITES_DIR/$site_name"
    docker compose stop

    print_success "Site '$site_name' stopped"
}

################################################################################
# Command: Restart Site
################################################################################

cmd_restart() {
    local site_name=$1

    if [ -z "$site_name" ]; then
        print_error "Usage: webstack restart <site-name>"
        return 1
    fi

    if ! site_exists "$site_name"; then
        print_error "Site '$site_name' does not exist"
        return 1
    fi

    print_info "Restarting site '$site_name'..."
    cd "$SITES_DIR/$site_name"
    docker compose restart

    print_success "Site '$site_name' restarted"
}

################################################################################
# Command: Delete Site
################################################################################

cmd_delete() {
    local site_name=$1

    if [ -z "$site_name" ]; then
        print_error "Usage: webstack delete <site-name>"
        return 1
    fi

    if ! site_exists "$site_name"; then
        print_error "Site '$site_name' does not exist"
        return 1
    fi

    print_warning "This will permanently delete site '$site_name' and all its data!"
    echo -n "Type the site name to confirm: "
    read confirmation

    if [ "$confirmation" != "$site_name" ]; then
        print_error "Deletion cancelled"
        return 1
    fi

    print_info "Stopping and removing containers..."
    cd "$SITES_DIR/$site_name"
    docker compose down -v

    print_info "Deleting site files..."
    rm -rf "$SITES_DIR/$site_name"

    print_success "Site '$site_name' deleted"
}

################################################################################
# Command: Backup Site
################################################################################

cmd_backup() {
    local site_name=$1

    if [ -z "$site_name" ]; then
        print_error "Usage: webstack backup <site-name>"
        return 1
    fi

    if ! site_exists "$site_name"; then
        print_error "Site '$site_name' does not exist"
        return 1
    fi

    local backup_date=$(date +%Y%m%d_%H%M%S)
    local backup_file="$BACKUPS_DIR/${site_name}_${backup_date}.tar.gz"

    mkdir -p "$BACKUPS_DIR"

    print_info "Creating backup of '$site_name'..."

    # Create database dump
    cd "$SITES_DIR/$site_name"
    print_info "Dumping database..."

    # Check database type
    if grep -q "postgres" docker-compose.yml; then
        docker compose exec -T db pg_dump -U $(grep DB_USER .env | cut -d'=' -f2) $(grep DB_NAME .env | cut -d'=' -f2) > db_dump.sql
    else
        docker compose exec -T db mysqldump -u$(grep DB_USER .env | cut -d'=' -f2) -p$(grep DB_PASSWORD .env | cut -d'=' -f2) $(grep DB_NAME .env | cut -d'=' -f2) > db_dump.sql
    fi

    # Create tarball
    print_info "Creating archive..."
    tar -czf "$backup_file" -C "$SITES_DIR" "$site_name"

    # Remove temporary dump
    rm -f "$SITES_DIR/$site_name/db_dump.sql"

    local backup_size=$(du -h "$backup_file" | cut -f1)
    print_success "Backup created: $backup_file ($backup_size)"
}

################################################################################
# Command: View Logs
################################################################################

cmd_logs() {
    local site_name=$1
    local service=${2:-web}

    if [ -z "$site_name" ]; then
        print_error "Usage: webstack logs <site-name> [service]"
        return 1
    fi

    if ! site_exists "$site_name"; then
        print_error "Site '$site_name' does not exist"
        return 1
    fi

    print_info "Showing logs for '$site_name' ($service)..."
    cd "$SITES_DIR/$site_name"
    docker compose logs -f "$service"
}

################################################################################
# Command: Site Info
################################################################################

cmd_info() {
    local site_name=$1

    if [ -z "$site_name" ]; then
        print_error "Usage: webstack info <site-name>"
        return 1
    fi

    if ! site_exists "$site_name"; then
        print_error "Site '$site_name' does not exist"
        return 1
    fi

    local site_dir="$SITES_DIR/$site_name"

    if [ -f "$site_dir/README.md" ]; then
        cat "$site_dir/README.md"
    else
        print_warning "No README found for site '$site_name'"
    fi
}

################################################################################
# Command: System Status
################################################################################

cmd_status() {
    print_header "WebStack System Status"

    # Traefik status
    echo -e "${CYAN}Traefik Reverse Proxy:${NC}"
    if docker ps | grep -q traefik; then
        echo -e "  Status: ${GREEN}Running${NC}"
        docker ps --filter name=traefik --format "  Uptime: {{.Status}}"
    else
        echo -e "  Status: ${RED}Stopped${NC}"
    fi

    echo ""

    # Sites count
    local total_sites=$(ls -1 "$SITES_DIR" 2>/dev/null | wc -l)
    local running_sites=0

    for site_dir in "$SITES_DIR"/*; do
        if [ -d "$site_dir" ]; then
            cd "$site_dir"
            if docker compose ps | grep -q "Up"; then
                ((running_sites++))
            fi
        fi
    done

    echo -e "${CYAN}Sites:${NC}"
    echo -e "  Total: ${BLUE}$total_sites${NC}"
    echo -e "  Running: ${GREEN}$running_sites${NC}"
    echo -e "  Stopped: ${YELLOW}$((total_sites - running_sites))${NC}"

    echo ""

    # Docker resources
    echo -e "${CYAN}Docker Resources:${NC}"
    docker stats --no-stream --format "  {{.Name}}: CPU {{.CPUPerc}}, Memory {{.MemUsage}}" | head -10

    echo ""

    # Disk usage
    echo -e "${CYAN}Disk Usage:${NC}"
    echo -e "  Sites: $(du -sh $SITES_DIR 2>/dev/null | cut -f1)"
    echo -e "  Backups: $(du -sh $BACKUPS_DIR 2>/dev/null | cut -f1)"
    echo -e "  Docker volumes: $(docker system df --format '{{.Size}}' -v 2>/dev/null | grep -i volume | head -1)"

    echo ""
}

################################################################################
# Command: Help
################################################################################

cmd_help() {
    cat <<EOF

${CYAN}╔════════════════════════════════════════════════════════════════════╗${NC}
${CYAN}║                    WebStack Manager CLI                           ║${NC}
${CYAN}╚════════════════════════════════════════════════════════════════════╝${NC}

${YELLOW}USAGE:${NC}
  webstack <command> [options]

${YELLOW}COMMANDS:${NC}

  ${GREEN}create${NC}              Create a new site (interactive)
  ${GREEN}list${NC}                List all sites
  ${GREEN}start${NC} <site>        Start a site
  ${GREEN}stop${NC} <site>         Stop a site
  ${GREEN}restart${NC} <site>      Restart a site
  ${GREEN}delete${NC} <site>       Delete a site (with confirmation)
  ${GREEN}backup${NC} <site>       Create a backup of a site
  ${GREEN}logs${NC} <site> [svc]   View logs (default: web)
  ${GREEN}info${NC} <site>         Show site information
  ${GREEN}status${NC}              Show system status
  ${GREEN}help${NC}                Show this help message

${YELLOW}EXAMPLES:${NC}

  # Create a new site
  webstack create

  # List all sites
  webstack list

  # Start a site
  webstack start mysite

  # View web server logs
  webstack logs mysite web

  # View PHP logs
  webstack logs mysite php

  # Create a backup
  webstack backup mysite

  # Show system status
  webstack status

${YELLOW}FILE LOCATIONS:${NC}

  Installation: ${BLUE}$INSTALL_DIR${NC}
  Sites: ${BLUE}$SITES_DIR${NC}
  Backups: ${BLUE}$BACKUPS_DIR${NC}

${YELLOW}SUPPORT:${NC}

  Documentation: https://github.com/joogiebear/web-stack
  Issues: Report bugs and request features on GitHub

EOF
}

################################################################################
# Main Command Router
################################################################################

main() {
    local command=$1
    shift

    case $command in
        create)
            cmd_create "$@"
            ;;
        list|ls)
            cmd_list "$@"
            ;;
        start)
            cmd_start "$@"
            ;;
        stop)
            cmd_stop "$@"
            ;;
        restart)
            cmd_restart "$@"
            ;;
        delete|rm)
            cmd_delete "$@"
            ;;
        backup)
            cmd_backup "$@"
            ;;
        logs)
            cmd_logs "$@"
            ;;
        info)
            cmd_info "$@"
            ;;
        status)
            cmd_status "$@"
            ;;
        help|--help|-h|"")
            cmd_help
            ;;
        *)
            print_error "Unknown command: $command"
            echo "Run 'webstack help' for usage information"
            exit 1
            ;;
    esac
}

main "$@"
